import { constants } from 'ethers';
import { solidityIdBytes32, solidityIdBytes4 } from './utils';
import { formatBytes32String, hexDataSlice } from 'ethers/lib/utils';

export const UNIVERSE_TOKEN_NAME = 'IQVerse';

export const UNIVERSE_TOKEN_SYMBOL = 'IQV';

export const ASSET_CLASS = {
  ERC20: solidityIdBytes4('ERC20'),
  ERC721: solidityIdBytes4('ERC721'),
  ERC1155: solidityIdBytes4('ERC1155'),
};

export enum ROLES_LIBRARY {
  ADMIN_ROLE = 'ADMIN_ROLE',
  SUPERVISOR_ROLE = 'SUPERVISOR_ROLE',
  LISTING_WIZARD_ROLE = 'LISTING_WIZARD_ROLE',
  UNIVERSE_WIZARD_ROLE = 'UNIVERSE_WIZARD_ROLE',
  WARPER_WIZARD_ROLE = 'WARPER_WIZARD_ROLE',
  TOKEN_QUOTE_MANAGER = 'TOKEN_QUOTE_MANAGER',
  DELEGATED_ADMIN = 'DELEGATED_ADMIN',
  DELEGATED_MANAGER = 'DELEGATED_MANAGER',
}

export const ROLES_LIBRARY_IDS = {
  ADMIN_ROLE: '0x0000000000000000000000000000000000000000000000000000000000000000',
  SUPERVISOR_ROLE: solidityIdBytes32(ROLES_LIBRARY.SUPERVISOR_ROLE),
  LISTING_WIZARD_ROLE: solidityIdBytes32(ROLES_LIBRARY.LISTING_WIZARD_ROLE),
  UNIVERSE_WIZARD_ROLE: solidityIdBytes32(ROLES_LIBRARY.UNIVERSE_WIZARD_ROLE),
  WARPER_WIZARD_ROLE: solidityIdBytes32(ROLES_LIBRARY.WARPER_WIZARD_ROLE),
  TOKEN_QUOTE_MANAGER: solidityIdBytes32(ROLES_LIBRARY.TOKEN_QUOTE_MANAGER),
  DELEGATED_ADMIN: ROLES_LIBRARY.DELEGATED_ADMIN,
  DELEGATED_MANAGER: ROLES_LIBRARY.DELEGATED_MANAGER,
};

export enum LISTING_STRATEGIES {
  FIXED_RATE = 'FIXED_RATE',
  FIXED_RATE_WITH_REWARD = 'FIXED_RATE_WITH_REWARD',
}
export const LISTING_STRATEGY_IDS = {
  FIXED_RATE: solidityIdBytes4(LISTING_STRATEGIES.FIXED_RATE),
  FIXED_RATE_WITH_REWARD: solidityIdBytes4(LISTING_STRATEGIES.FIXED_RATE_WITH_REWARD),
};

export enum TAX_STRATEGIES {
  FIXED_RATE_TAX = 'FIXED_RATE_TAX',
  FIXED_RATE_TAX_WITH_REWARD = 'FIXED_RATE_TAX_WITH_REWARD',
}
export const TAX_STRATEGY_IDS = {
  FIXED_RATE_TAX: solidityIdBytes4(TAX_STRATEGIES.FIXED_RATE_TAX),
  FIXED_RATE_TAX_WITH_REWARD: solidityIdBytes4(TAX_STRATEGIES.FIXED_RATE_TAX_WITH_REWARD),
};

export enum WARPER_PRESETS {
  ERC721_PRESET_CONFIGURABLE = 'ERC721PresetConfigurable',
}
export const WARPER_PRESET_IDS = {
  ERC721_PRESET_CONFIGURABLE: formatBytes32String(WARPER_PRESETS.ERC721_PRESET_CONFIGURABLE),
};

export enum CONTRACT_REGISTRY_KEYS {
  LISTING_MANAGER = 'ListingManager',
  RENTING_MANAGER = 'RentingManager',
  ERC20_REWARD_DISTRIBUTOR = 'ERC20RewardDistributor',
}
export const CONTRACT_REGISTRY_KEY_IDS = {
  LISTING_MANAGER: solidityIdBytes4(CONTRACT_REGISTRY_KEYS.LISTING_MANAGER),
  RENTING_MANAGER: solidityIdBytes4(CONTRACT_REGISTRY_KEYS.RENTING_MANAGER),
  ERC20_REWARD_DISTRIBUTOR: solidityIdBytes4(CONTRACT_REGISTRY_KEYS.ERC20_REWARD_DISTRIBUTOR),
};

/**
 * A constant that represents one hundred percent for calculation.
 * This defines a calculation precision for percentage values as two decimals.
 * For example: 1 is 0.01%, 100 is 1%, 10_000 is 100%.
 */
export const HUNDRED_PERCENT_PRECISION_4 = 10_000;

export const HUNDRED_PERCENT = 100;

export const DECIMALS_18 = 18;

export const BASE_TOKEN_DECIMALS = DECIMALS_18;

export const ADDRESS_ZERO = constants.AddressZero;

export const EMPTY_BYTES_DATA_HEX = '0x';

export const EMPTY_BYTES32_DATA_HEX = constants.HashZero;

export const EMPTY_BYTES4_DATA_HEX = hexDataSlice(EMPTY_BYTES32_DATA_HEX, 0, 4);

export const SECONDS_IN_DAY = 86_400;

export const SECONDS_IN_HOUR = 3600;
